// Code generated by aocgen; DO NOT EDIT.
package year2023

import (
	// "bufio"
	// "fmt"
	// "os"
	// "regexp"
	// "sort"
	"strconv"
	"unicode"
	"strings"
)


type Day01 struct{}

func (p Day01) PartA(lines []string) any {
	var total int
	for _, line := range lines {
		var firstDigit, lastDigit rune
		for _, c := range line {
			if unicode.IsDigit(c) {
				if firstDigit == 0 {
					firstDigit = c
				}
				lastDigit = c
			}
		}
		// combine firstDigit and lastDigit to form a two-digit number
		num, err := strconv.Atoi(string(firstDigit) + string(lastDigit))
		if err != nil {
			// handle the error here
			continue
		}
		// add to total
		total += num
	}
	return total
}

func (p Day01) PartB(lines []string) any {
	numbers := []struct {
		word string
		num  int
	}{
		{"one", 1},
		{"two", 2},
		{"three", 3},
		{"four", 4},
		{"five", 5},
		{"six", 6},
		{"seven", 7},
		{"eight", 8},
		{"nine", 9},
		{"0", 0},
		{"1", 1},
		{"2", 2},
		{"3", 3},
		{"4", 4},
		{"5", 5},
		{"6", 6},
		{"7", 7},
		{"8", 8},
		{"9", 9},
	}
	var total int 
	for _, line := range lines {
		line = strings.TrimSpace(line)
		var first, last *int
		currString := ""

		for _, c := range line {
			if unicode.IsDigit(c) {
				num := int(c - '0')
				if first == nil {
					first = &num
				}
				last = &num
				currString = ""
				continue
			}

			currString += string(c)
			for itx, pair := range numbers {
				if strings.Contains(currString, pair.word) {
					num := itx + 1
					if first == nil {
						first = &num
					}
					last = &num
					currString = string(currString[len(currString)-1])
					break
				}
			}
		}

		if first != nil && last != nil {
			val := *first*10 + *last
			total += val
		}
	}
	return total
}